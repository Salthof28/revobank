generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}

enum AccountType {
  SAVING
  CHECKING
  DEPOSIT
}

enum RoleUser {
  CUSTOMER
  ADMIN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER
}
enum CodeTypeTransaction {
  TR
  DP
  WH
}


model users {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  email      String     @unique @db.VarChar(320)
  phone      String     @unique @db.VarChar(20)
  number_ktp String     @unique @db.VarChar(20)
  password   String     @db.VarChar(255)
  role_user  RoleUser
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @default(now()) @db.Timestamptz(6)
  accounts   accounts[]
}

model accounts {
  id                                                         Int            @id @default(autoincrement())
  user_id                                                    Int?
  account_number                                             String         @unique @db.VarChar(25)
  account_type                                               AccountType
  account_name                                               String         @db.VarChar(100)
  balance                                                    Decimal?       @default(0.00) @db.Decimal(17, 2)
  currency                                                   String         @db.VarChar(8)
  status                                                     AccountStatus
  pin                                                        String         @db.VarChar(80)
  branch_code                                                String         @db.VarChar(10)
  created_at                                                 DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at                                                 DateTime?      @default(now()) @db.Timestamptz(6)
  users                                                      users?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transactions                                               transactions[] @relation("transactions")
  destination_transactions                                   transactions[] @relation("destination_transactions")
}

model transactions {
  id                                                     Int               @id @default(autoincrement())
  account_id                                             Int
  destination_account_id                                 Int?
  transaction_type                                       TransactionType
  status                                                 TransactionStatus
  amount                                                 Decimal?          @default(0.00) @db.Decimal(17, 2)
  code_transaction_ref                                   CodeTypeTransaction
  number_transaction_ref                                 Int               @default(autoincrement()) @unique
  description                                            String?           @db.VarChar(255)
  created_at                                             DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at                                             DateTime?         @default(now()) @db.Timestamptz(6)
  transactions                                           accounts          @relation("transactions", fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  destination_transactions                               accounts?         @relation("destination_transactions", fields: [destination_account_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}



